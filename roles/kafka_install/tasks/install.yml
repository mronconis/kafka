---
- name: Check install version
  block:
    - name: "Check selected kafka version: {{ kafka_version }}"
      ansible.builtin.assert:
        that:
          - kafka_versions[kafka_version] is defined
        quiet: true
        fail_msg: "Kafka version {{ kafka_version }} not defined, the allowed versions are: {{ kafka_versions.keys() }}"
      when:
        - not amqstreams_enable

    - name: "Check selected AMQ streams version: {{ amqstreams_version }}"
      ansible.builtin.assert:
        that:
          - amqstreams_versions[amqstreams_version] is defined
        quiet: true
        fail_msg: "AMQ streams version {{ amqstreams_version }} not defined, the allowed versions are: {{ amqstreams_versions.keys() }}"
      when:
        - amqstreams_enable
  run_once: true

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ kafka_local_archive_dir }}"
  register: __kafka_local_path
  delegate_to: localhost

- name: Set download filename
  ansible.builtin.set_fact:
    __kafka_install_archive_file: "{{ amqstreams_enable | ternary(amqstreams_archive_filename, kafka_archive_filename) }}"

- name: Set download paths
  ansible.builtin.set_fact:
    __kafka_remote_archive_path: "{{ kafka_install_workdir }}/{{ __kafka_install_archive_file }}"
    __kafka_local_archive_path: "{{ __kafka_local_path.stat.path }}/{{ __kafka_install_archive_file }}"

- name: Set download url
  ansible.builtin.set_fact:
    __kafka_install_download_url: "{{ amqstreams_enable | ternary(amqstreams_download_url, kafka_download_url) }}"

- name: Check local archive
  ansible.builtin.stat:
    path: "{{ __kafka_local_archive_path }}"
  register: __kafka_local_archive
  delegate_to: localhost
    
- name: Download artifact
  when:
    - __kafka_local_archive.stat is defined
    - not __kafka_local_archive.stat.exists
  block:
    - name: Download from rhn
      ansible.builtin.include_tasks: install/rhn.yml
      when:
        - amqstreams_enable

    - name: Download from web
      ansible.builtin.include_tasks: install/web.yml
      when:
        - not amqstreams_enable

- name: Check remote archive
  ansible.builtin.stat:
    path: "{{ __kafka_remote_archive_path }}"
  register: __kafka_remote_archive
  become: true

- name: Ensure workdir {{ kafka_install_workdir }} exists.
  ansible.builtin.file:
    path: "{{ kafka_install_workdir }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: 0750
  become: true

- name: Copy archive to target nodes
  ansible.builtin.copy:
    src: "{{ __kafka_local_archive_path }}"
    dest: "{{ __kafka_remote_archive_path }}"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: 0640
  register: new_version_downloaded
  when:
    - __kafka_remote_archive.stat is defined
    - not __kafka_remote_archive.stat.exists
  become: true

- name: Unarchive {{ __kafka_remote_archive_path }}
  ansible.builtin.unarchive:
    src: "{{ __kafka_remote_archive_path }}"
    dest: "{{ kafka_install_workdir }}"
    remote_src: true
    creates: "{{ kafka_home }}"
    owner:  "{{ kafka_user }}"
    group:  "{{ kafka_group }}"
  become: true

- name: Check kafka home
  ansible.builtin.stat:
    path: "{{ kafka_home }}"
  register: __kafka_home
  become: true

- name: "Check state of kafka home directory: {{ kafka_home }}"
  ansible.builtin.assert:
    that:
      - __kafka_home is defined
      - __kafka_home.stat is defined
      - __kafka_home.stat.exists is defined
      - __kafka_home.stat.exists
    quiet: true
    fail_msg: "Kafka home directory has not been created: {{ kafka_home }}."

- name: Return Kafka microversion
  ansible.builtin.command: "{{ kafka_home }}/bin/kafka-topics.sh --version"
  register: __kafka_microversion
  changed_when: false
  become: true

- name: Check Kafka microversion
  when:
    - __kafka_microversion is defined
    - __kafka_microversion.stdout is defined
  block:
    - name: "Kafka version is: {{ kafka_version }}"
      ansible.builtin.assert:
        that:
          - __kafka_microversion.stdout == kafka_versions[kafka_version]['microversion']
        quiet: true
        fail_msg: Kafka version is not as expected {{ __kafka_microversion }}.
      when:
        - not amqstreams_enable

    - name: "AMQ streams version is: {{ amqstreams_version }}"
      ansible.builtin.assert:
        that:
          - __kafka_microversion.stdout == amqstreams_versions[amqstreams_version]['microversion']
        quiet: true
        fail_msg: AMQ streams version is not as expected {{ __kafka_microversion }}.
      when:
        - amqstreams_enable